" let g:ale_completion_enabled = 1
let data_dir = has('nvim') ? stdpath('data') . '/site' : (has('win32') ? expand($HOMEDRIVE).'/Users/'.expand($USERNAME).'/vimfiles' : expand('$HOME/.vim'))
"echo "Hello VIM Script"
"echo data_dir
if empty(glob(data_dir . '/autoload/plug.vim'))
	"echo "vim-plug not installed"
	silent execute '!curl --socks5 127.0.0.1:1080 -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	echo "Vim-plug Installed Successfully"
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if has('win32')
 source $HOME/vimfiles/init/plug.vimrc " plugin loader
 source $HOME/vimfiles/init/plugins.vimrc " plugin settings
 source $HOME/vimfiles/init/general.vimrc " plugin settings
 source $HOME/vimfiles/init/function.vimrc " Custom function
elseif has('uniux')
 source $HOME/.vim/init/plug.vimrc " plugin loader
 source $HOME/.vim/init/plugins.vimrc " plugin settings
 source $HOME/.vim/init/general.vimrc " plugin settings
 source $HOME/.vim/init/function.vimrc " Custom function
endif
" let VIMRC_FOLDR = has('win32') ? $HOME.'/vimfiles' : $HOME.'/.vim'


" source VIMRC_FOLDR/init/plug.vimrc " plugin loader
" source $VIMRC_FOLDR/init/plugins.vimrc " plugin settings
" source $VIMRC_FOLDR/init/general.vimrc " plugin settings
" source $VIMRC_FOLDR/init/function.vimrc " Custom function


" set completeopt=menu,menuone,popup,noselect,noinsert,preview
" let asdfasdf = system('pipenv --venv') .'/bin/python'
" let venv_path = substitute(pipenv_venv_path, '\n', '', '')
" let ssssss = venv_path . '/bin/python'
" let g:jedi#environment_path = asdfasdf
"
" let g:lsp_diagnostics_enabled = 1
" let g:lsp_diagnostics_echo_cursor=1
" let g:lsp_settings_filetype_python = ['pyls',  'pyls-ms', 'pyls-all', 'pyright-langserver', 'jedi-language-server']"
" let g:lsp_settings_filetype_python = ['pyls-ms']
" jump to last cursor position while reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
